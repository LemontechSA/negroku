#!/usr/bin/env ruby

require 'rubygems'
require 'capistrano'

begin
  require 'thor'
rescue LoadError
  puts '[Negroku] => Tried load load Thor but could not find it.'
  puts '[Negroku] => Install Thor ( gem install thor ) and try again.'
  exit
end

class App < Thor
  desc "create", "Create application. Intialize the capfile, also create the deploy.rb file in the config folder"
  method_option :local_recipes, :type => :boolean, :aliases => "-l"
  def create
    data = {}
    say "We're about to create your application deploy setup"
    data[:application_name] = ask "Give your application a name:"
    data[:repo] = aks("Are you going to use github:", :limited_to => ["github", "bitbucket"])
    data[:target_server] = aks("Where are you going to deploy:", :limited_to => ["szot", "kross"])
    init(".", data)
  end
end

class CLI < Thor
  register(App, 'app', 'app <command>', 'Application')
end

def init(target=".", data)
  puts target
  # Create the cap file if not found
  if Dir.entries(target).include?("Capfile")
    puts "[Negroku] => Found Capfile!"
  else
    puts "[Negroku] => Capifying!"
    `capify #{File.expand_path(target)}`
  end
  path    = File.expand_path(target)
  capfile = File.expand_path(File.join(target, "Capfile"))

  # Find or create config folder
  unless File.directory?(File.join(path, "config"))
    puts "[Negroku] => Could not find the \"config\" folder. Creating it now!"
    %x(mkdir #{File.join(path, 'config')})
  end

  # replace and rename older deploy.rb
  if File.exist?(File.join(path, "config", "deploy.rb"))
    puts "[Negroku] => Backing up deploy.rb"
    old_versions = Dir.entries(File.join(path, 'config')).map {|entree| entree if entree =~ /deploy\.old\.(\d+)\.rb$/}.compact!
    if old_versions.empty?
      %x(mv #{File.join(path, 'config', 'deploy.rb')} #{File.join(path, 'config', 'deploy.old.1.rb')})
    else
      version = old_versions.last.match('^deploy\.old\.(\d+)\.rb$')[1].to_i + 1
      %x(mv #{File.join(path, 'config', 'deploy.rb')} #{File.join(path, 'config', "deploy.old.#{version}.rb")})
    end
  else
    puts "[Negroku] => Could not find deploy.rb. Creating a new one!"
  end

  # Create the new deploy
  puts "[Negroku] => Writing new deploy.rb."
  erb = File.read(File.join(File.dirname(__FILE__), '../lib', 'negroku', 'deploy.rb.erb'))
  File.open(File.join(path, 'config', 'deploy.rb'), 'w') do |f|
    f.write ERB.new(erb).result(binding)
  end

  # checks for both require "negroku" and require "negroku/initializer"
  unless File.open(File.join('Capfile'), 'r').read.include?('require "negroku"')
    puts "[Negroku] => Adding Negroku Loader inside #{path}/Capfile."
    File.open(File.join(path, 'Capfile'), "a") do |cfile|
  cfile << <<-capfile
  \n
  require "negroku"
  load negroku
  capfile
    end
  end
end

CLI.start

exit